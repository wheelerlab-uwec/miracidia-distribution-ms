# configfile: "config.yaml"

import pandas as pd

sample_table = pd.read_csv("samples.tsv", sep="\t", dtype=str)

# append all accession number to a list
READS = []
SAMPLES = []

for i in sample_table['reads']:
    READS.append(i)
for i in sample_table['sample']:
    if i not in SAMPLES:
        SAMPLES.append(i)

rule all:
    input: "reports/multiqc_report.html",
           "plots/pca.pdf",
           "plots/pca.png",
           "plots/volcano.png"
    output: "reports/snakemake-report.html"
    shell: "snakemake --report {output}"

rule cp_fq:
    input: "/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{reads}.fastq.gz"
    output: "fastq/pe/{reads}.fastq.gz"
    shell: "cp {input} {output}"

rule fastqc_raw:
    input: "fastq/pe/{reads}.fastq.gz"
    output:
        zip = "fastq/pe/qc/{reads}_fastqc.zip",
        html = temp("fastq/pe/qc/{reads}_fastqc.html")
    params: outdir = "fastq/pe/qc"
    threads: 32
    priority: 10
    shell: "fastqc -t {threads} {input} -o {params.outdir}"

rule trim_fastq:
    input:  r1 = "fastq/pe/{sample}_R1_001.fastq.gz",
            r2 = "fastq/pe/{sample}_R2_001.fastq.gz"
    output: out1 = "fastq/trimmed/{sample}_R1_001.fastq.gz",
            out2 = "fastq/trimmed/{sample}_R2_001.fastq.gz",
    threads: 32
    shell: "cutadapt -j {threads} -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT -u 10 -U 10 -q 20 -m 50 --nextseq-trim=20 -o {output.out1} -p {output.out2} {input.r1} {input.r2}"

rule fastqc_trim:
    input: "fastq/trimmed/{reads}.fastq.gz"
    output:
        zip = "fastq/trimmed/qc/{reads}_fastqc.zip",
        html = temp("fastq/trimmed/qc/{reads}_fastqc.html")
    params: outdir = "fastq/trimmed/qc"
    threads: 32
    priority: 20
    shell:"fastqc -t {threads} {input} -o {params.outdir}"

rule get_genome:
    output: temp("genome/genome.fa.gz")
    shell: "wget -O {output} https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.genomic.fa.gz "

rule decompress_genome:
    input: "genome/genome.fa.gz"
    output: "genome/genome.fa"
    shell: "gzip -d {input}"

rule get_gtf:
    output: temp("genome/annotations.gtf.gz")
    shell: "wget -O {output} https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.canonical_geneset.gtf.gz"

rule decompress_gtf:
    input: "genome/annotations.gtf.gz"
    output: "genome/annotations.gtf"
    shell: "gzip -d {input}"

rule star_sa:
    input:
        ref = "genome/genome.fa",
        gtf = "genome/annotations.gtf"
    output: 
        directory("genome/star/")
    threads: 16
    shell:
        """
        STAR \
        --runThreadN {threads} \
        --runMode genomeGenerate \
        --genomeDir {output} \
        --genomeFastaFiles {input.ref} \
        --sjdbGTFfile {input.gtf} \
        --sjdbOverhang 139 \
        --genomeSAindexNbases 13
        """

rule star_first_align:
    input: 
        reads1 = "fastq/trimmed/{sample}_R1_001.fastq.gz",
        reads2 = "fastq/trimmed/{sample}_R2_001.fastq.gz",
        genome = "genome/star/"
    output: 
        bam = temp("alignment/star_one/{sample}/Aligned.sortedByCoord.out.bam"),
        logs = "alignment/star_one/{sample}/Log.final.out",
        junctions = "alignment/star_one/{sample}/SJ.out.tab"
    params:
        prefix = "alignment/star_one/{sample}/"
    threads: 16
    shell:
        """
        STAR \
        --runThreadN {threads} \
        --runMode alignReads \
        --genomeDir {input.genome} \
        --readFilesIn {input.reads1}, {input.reads2} \
        --readFilesCommand zcat \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMunmapped Within \
        --outFileNamePrefix {params.prefix} 
        """

rule star_second_align:
    input: 
        reads1 = "fastq/trimmed/{sample}_R1_001.fastq.gz",
        reads2 = "fastq/trimmed/{sample}_R2_001.fastq.gz",
        genome = "genome/star/",
        junctions = expand("alignment/star_one/{sample}/SJ.out.tab", sample=SAMPLES)
    output: 
        bam = "alignment/star_two/{sample}/Aligned.sortedByCoord.out.bam",
        log = "alignment/star_two/{sample}/Log.final.out"
    params:
        prefix = "alignment/star_two/{sample}/",
        junctions = ' '.join(expand("alignment/star_one/{sample}/", sample=SAMPLES)),
        rg = "{sample}"
    threads: 16
    shell:
        """
        STAR \
        --runThreadN {threads} \
        --runMode alignReads \
        --genomeDir {input.genome} \
        --readFilesIn {input.reads1}, {input.reads2}, \
        --readFilesCommand zcat \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMunmapped Within \
        --outFileNamePrefix {params.prefix} \
        --outSAMattributes NH HI AS nM RG \
        --outSAMattrRGline ID:{params.rg} SM:{params.rg} \
        --sjdbFileChrStartEnd {params.junctions}
        """

rule qualimap_bam:
    input:
        bam = "alignment/star_two/{sample}/Aligned.sortedByCoord.out.bam",
        gtf = "genome/annotations.gtf"
    output: directory("qualimap/star/bam/{sample}")
    threads: 16
    shell: "qualimap bamqc -nt {threads} -outdir {output} -bam {input.bam} --feature-file {input.gtf} -p strand-specific-forward"

rule qualimap_rnaseq:
    input:
        bam = "alignment/star_two/{sample}/Aligned.sortedByCoord.out.bam",
        gtf = "genome/annotations.gtf"
    output: directory("qualimap/star/rnaseq/{sample}")
    shell: "qualimap rnaseq -outdir {output} -bam {input.bam} -gtf {input.gtf} -p strand-specific-forward"

rule dedup:
    input: "alignment/star_two/{sample}/Aligned.sortedByCoord.out.bam"
    output:
        dedup = "dedup/star/{sample}.bam",
        log = "logs/picard/{sample}.log"
    shell: "picard MarkDuplicates -I {input} -O {output.dedup} -M {output.log} --VALIDATION_STRINGENCY SILENT"

rule count:
    input: 
        bam = expand("dedup/star/{sample}.bam", sample=SAMPLES),
        gtf = "genome/annotations.gtf"
    output: 
        "counts/star/counts.tsv",
        "counts/star/counts.tsv.summary"
    params: outfile = "counts/star/counts.tsv"
    threads: 32
    shell:
        """
        featureCounts \
        {input.bam} \
        -a {input.gtf} \
        -o {params.outfile} \
        -T {threads} \
        -p \
        --countReadPairs \
        -C \
        --ignoreDup \
        -M \
        --fraction \
        --byReadGroup
        """

rule multiqc:
    input: 
        expand("fastq/pe/qc/{reads}_fastqc.zip", reads=READS),
        expand("fastq/trimmed/qc/{reads}_fastqc.zip", reads=READS),
        expand("alignment/star_two/{sample}/Log.final.out", sample=SAMPLES),
        expand("qualimap/star/bam/{sample}", sample=SAMPLES),
        expand("qualimap/star/rnaseq/{sample}", sample=SAMPLES),
        expand("logs/picard/{sample}.log", sample=SAMPLES),
        "counts/star/counts.tsv.summary"
    output: "reports/multiqc_report.html"
    params: outdir = "reports/"
    threads: 16
    shell: "multiqc --outdir {params.outdir} --force -d ."

rule diffexp:
    input: "counts/star/counts.tsv"
    output: "plots/pca.pdf",
            "plots/pca.png",
            "plots/volcano.png"
    shell: "Rscript diffexp.R {input}"
